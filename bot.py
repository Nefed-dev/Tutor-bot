from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Command
from aiogram.types import InputFile

from config import BOT_TOKEN, ADMIN_ID
from database import Database
import keyboard as kb
import sqlite3

bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot)
db = Database(path_to_db='users.db')

CHECK_LIST_LINK = 'https://drive.google.com/file/d/1Q48SJJM4GYQGx22JKBUinBk3HBfnD0my/view?usp=sharing'
EGE_CHAT_LINK = 'https://t.me/joinchat/WBHiBNDvLwKIDc6T'
OGE_CHAT_LINK = 'https://t.me/joinchat/H8rY12S3o_HvJeuM'


async def set_default_commands(dp):
    await dp.bot.set_my_commands([types.BotCommand("start", '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')])


def return_all_user():

    all_user = f'–í—Å–µ–≥–æ –≤ –±–∞–∑–µ {db.count_users()[0]} —á–µ–ª–æ–≤–µ–∫.\n' \
               '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: \n' \
               'CHAT_ID - –ò–ú–Ø - –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê\n'
    for user in db.select_all_users():
        all_user += f"{user[0]} - {user[1]} - {user[2]}\n"
    return all_user


@dp.message_handler(Command('start'))
async def hello_message(message: types.Message):
    """–õ–æ–≤–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    user_fullname = message.from_user.full_name
    user_id = message.from_user.id

    try:
        db.create_table()
    except Exception as err:
        print(err)

    try:
        db.add_user(id=user_id, fullname=user_fullname)
    except sqlite3.IntegrityError as err:
        print(err)

    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç! üòä\n\n'
                              f'–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è üëå\n\n'
                              f'–¢–µ–ª–µ—Ñ–æ–Ω –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏, —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–±–µ –º–∞—Ç–µ—Ä–∏–∞–ª, –∑–≤–æ–Ω–∏—Ç—å –Ω–µ –±—É–¥—É, –æ–±–µ—â–∞—é üòÅ',
                         reply_markup=kb.phone_kb)


@dp.message_handler(Command('dbinchat', prefixes='!'))
async def admin_db_in_chat(message: types.Message):
    user_id = message.from_user.id
    if user_id in ADMIN_ID:
        all_user = return_all_user()
        await message.answer(text=f'{all_user}')


@dp.message_handler(Command('dbdownload', prefixes='!'))
async def admin_db_download(message: types.Message):
    user_id = message.from_user.id
    if user_id in ADMIN_ID:
        bd_file = InputFile("users.db", filename="users.db")
        await bot.send_document(chat_id=user_id, document=bd_file)


@dp.message_handler(content_types=types.ContentTypes.CONTACT)
async def registration(message: types.Message):
    """–õ–æ–≤–∏–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î,
    –ø—Ä–∏—Å—ã–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    """

    user_phone = message.contact.phone_number

    try:
        db.update_user_phone(phone=user_phone, id=message.from_user.id)
    except sqlite3.InternalError as err:
        print(err)

    await message.answer(text='–°—É–ø–µ—Ä! üòâ –¢–µ–ø–µ—Ä—å —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –º–æ–µ–º –±–æ—Ç–µ.\n\n'
                              '–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –∫–Ω–æ–ø–æ–∫ –∏ –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å',
                         reply_markup=kb.main_keyboard)

    user_info = db.select_user(id=message.from_user.id)
    # user_info = (id, name, phone)

    await dp.bot.send_message(chat_id=335825375, text=f"–ù–æ–≤—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ Dema Fizmat: \n"
                                                      f"ID = {user_info[0]}\n"
                                                      f"–ò–º—è = {user_info[1]}, \n"
                                                      f"phone = {user_info[2]}")


@dp.message_handler()
async def message_answer(message: types.Message):
    if message.text == '–•–æ—á—É —á–µ–∫-–ª–∏—Å—Ç':
        await message.answer(text=f'–î–µ—Ä–∂–∏ üòâ. \n–ß–µ–∫ –ª–∏—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ :)\n'
                                  f'{CHECK_LIST_LINK}')
    elif message.text == '–•–æ—á—É –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä':
        await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫, –∏ —è —Å–∫–∏–Ω—É —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç'
                                  '\n\n–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤–µ–±–∏–Ω–∞—Ä–∞—Ö –±—É–¥–µ—Ç —Ç–∞–º üòå',
                             reply_markup=kb.vebinar_keyboard)
    elif message.text == '‚è™–ù–∞–∑–∞–¥‚è™':
        await message.answer(text='–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –∫–Ω–æ–ø–æ–∫ –∏ –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å!',
                             reply_markup=kb.main_keyboard)
    elif message.text == '–í–µ–±–∏–Ω–∞—Ä –û–ì–≠':
        await message.answer(text=f'–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –∏ —Ç—ã –ø–æ–ø–∞–¥–µ—à—å –≤ —á–∞—Ç –ø–æ –≤–µ–±–∏–Ω–∞—Ä—É –¥–ª—è –û–ì–≠\n'
                                  f'{OGE_CHAT_LINK}')
    elif message.text == '–í–µ–±–∏–Ω–∞—Ä –ï–ì–≠':
        await message.answer(text=f'–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –∏ —Ç—ã –ø–æ–ø–∞–¥–µ—à—å –≤ —á–∞—Ç –ø–æ –≤–µ–±–∏–Ω–∞—Ä—É –¥–ª—è –ï–ì–≠\n'
                                  f'{EGE_CHAT_LINK}')


# elif message.text == '–ò–Ω—Ç–µ–Ω—Å–∏–≤ –ø–æ –û–ì–≠':
#     await message.answer(
#         text='–°–∫–æ—Ä–æ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! \n'
#              '–°–ª–µ–¥–∏ –∑–∞ –∏–Ω—Å—Ç–æ–π, —Ç–∞–∫–∂–µ —è –ø—Ä–∏—à–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞')
# elif message.text == '–ò–Ω—Ç–µ–Ω—Å–∏–≤ –û–ì–≠':
#     await message.answer(text='–ü—Ä–∏–≤–µ—Ç, —è –≥–æ—Ç–æ–≤–ª—é –±–æ–º–±–æ–≤—ã–π –∏–Ω—Ç–µ–Ω—Å–∏–≤ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –û–ì–≠, '
#                               '–≥–¥–µ —Ç—ã –∑–∞ 20 —á–∞—Å–æ–≤ –Ω–∞—É—á–∏—à—å—Å—è –ø–∏—Å–∞—Ç—å –û–ì–≠ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é —á–µ—Ç–≤–µ—Ä–∫—É, '
#                               '–ª–∏–±–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É –¥–æ –ü—è—Ç–µ—Ä–∫–∏!\n '
#                               '–°–ª–µ–¥–∏ –∑–∞ —Å—Ç–æ—Ä–∏—Å, —Ç–∞–∫–∂–µ —è –ø—Ä–∏—à–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —ç—Ç–æ—Ç –±–æ—Ç')
# else:
#     await message.answer(reply_markup=kb.main_keyboard,
#                          text='–ë–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫')

async def on_startup(dp):
    try:
        db.create_table()
    except Exception as err:
        print(err)
    await set_default_commands(dp)

if __name__ == '__main__':

    executor.start_polling(dp, on_startup=on_startup)
